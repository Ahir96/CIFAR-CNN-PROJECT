import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.examples.tutorials.mnist import input_data

#### CIFAR-10 downloaded to use its dataset
###### CIFAR-10 is labeled subsets of the 80 M tiny images dataset.
#### For more info: https://www.cs.toronto.edu/~kriz/cifar.html

#remember where the file path is
CIFAR_DIR = 'cifar-10-python/cifar-10-batches-py/'

#load the 'pickled' data and 'unpickle' it

def unpickle(file):
    import pickle
    with open(file, 'rb') as fo:
        cifar_dict = pickle.load(fo, encoding='bytes')
    return cifar_dict

#files in the CIFAR_dir
dirs = ['batches.meta','data_batch_1','data_batch_2','data_batch_3','data_batch_4','data_batch_5','test_batch']

#make a list to put the files in
all_data = [0,1,2,3,4,5,6]

for i,direc in zip(all_data, dirs):
    all_data[i] = unpickle(CIFAR_DIR+direc)

#assign the files in the all_data list
batch_meta = all_data[0]
data_batch1 = all_data[1]
data_batch2 = all_data[2]
data_batch3 = all_data[3]
data_batch4 = all_data[4]
data_batch5 = all_data[5]
test_batch = all_data[6]

#check
#print(batch_meta)
#print(data_batch1.keys())
###-- each of the batch files contains a dictionary with data and labels.
### the data set file called 'batches.meta' contains python dict with label_names

####------Display a single image-------

X = data_batch1[b"data"] #could be any batch number ex. batch1/2/3/4

X = X.reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype("uint8")
print(X[0].max()) # 255
print((X[0]/255).max()) #1.0
#plt.imshow(X[0]) #<matplotlib.image.AxesImage at 0x1c35c850be0>
plt.imshow(X[4]) #<matplotlib.image.AxesImage at 0x1c35cba9e80> 
#try other items ex. X[3]/x[5] etc.
plt.show()

#Helper Functions for grabbing the next batch

def one_hot_encode(vec, vals=10):

    '''
    For use to one-hot encode the 10- possible labels
    '''
    n = len(vec)
    out = np.zeros((n, vals)) #tuple
    out[range(n), vec] = 1
    return out

class CifarHelper():

    def __init__(self):

        self.i = 0

        self.all_train_batches = [data_batch1, data_batch2, data_batch3, data_batch4, data_batch5]
        self.test_batch  = [test_batch]

        self.training_images = None
        self.training_labels = None

        self.test_images = None
        self.test_labels = None

    def set_up_images(self):
            
        print("Setting Up Training Images and Labels")
        
        self.training_images = np.vstack([d[b"data"] for d in self.all_train_batches])
        train_len = len(self.training_images)
        
        self.training_images = self.training_images.reshape(train_len,3,32,32).transpose(0,2,3,1)/255
        self.training_labels = one_hot_encode(np.hstack([d[b"labels"] for d in self.all_train_batches]), 10)
        
        print("Setting Up Test Images and Labels")
        
        self.test_images = np.vstack([d[b"data"] for d in self.test_batch])
        test_len = len(self.test_images)
        
        self.test_images = self.test_images.reshape(test_len,3,32,32).transpose(0,2,3,1)/255
        self.test_labels = one_hot_encode(np.hstack([d[b"labels"] for d in self.test_batch]), 10)

        
    def next_batch(self, batch_size):
        x = self.training_images[self.i:self.i+batch_size].reshape(100,32,32,3)
        y = self.training_labels[self.i:self.i+batch_size]
        self.i = (self.i + batch_size) % len(self.training_images)
        return x, y

#Assign objects to set up the run session
ch = CifarHelper()
ch.set_up_images()

#next batch grabbin line:
# batch = ch.next_batch(100)

#####-----CREATING THE MODEL-------#####

##---Placeholder---

x = tf.placeholder(tf.float32, shape=[None, 32,32,3]) #pixel
y_true = tf.placeholder(tf.float32, shape = [None, 10]) #label
hold_prob = tf.placeholder(tf.float32) #for holding dropouts

#helper functions

def init_weights(shape):
    '''
    Assign w (weight) variable
    '''
    init_random_dist = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(init_random_dist)

def init_bias(shape):
    '''
    Assign b (bias) variable
    '''
    init_bias_vals = tf.constant(0.1, shape = shape)
    return tf.Variable(init_bias_vals)

def conv2d(x, W):
    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding = 'SAME')

def max_pool_2by2(x):
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides = [1,2,2,1], padding ='SAME')

def convolutional_layer(input_x, shape):
    '''
    Activation function, here using reLu
    '''
    W = init_weights(shape)
    b = init_bias([shape[3]])
    return tf.nn.relu(conv2d(input_x, W)+b) 

def normal_full_layer(input_layer, size):
    input_size = int(input_layer.get_shape()[1])
    W = init_weights([input_size, size])
    b = init_bias([size])
    return tf.matmul(input_layer,W) + b # y = xW + b


######---CREATING THE LAYERS------######

#Bottom and top  Convo and Pooling layers
convo_1 = convolutional_layer(x, shape=[4,4,3,32]) # 4 x 4 size, 3 channel colors, 32 pixels
convo_1_pooling = max_pool_2by2(convo_1)

convo_2 = convolutional_layer(convo_1_pooling, shape=[4,4,32,64])
convo_2_pooling = max_pool_2by2(convo_2)

#Flattened layer

convo_2_flat = tf.reshape(convo_2_pooling, [-1, 8*8*64]) #8 x 8 size, 64 pixels

#New Full Layer

full_layer_one = tf.nn.relu(normal_full_layer(convo_2_flat, 1024)) #1024 pixels

#Dropout Layer

full_one_dropout = tf.nn.dropout(full_layer_one,keep_prob=hold_prob)

#set dropout output to predicting
y_pred = normal_full_layer(full_one_dropout, 10)

###############-----LOSS FUNCTION-------##############

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = y_true, logits = y_pred))


###############-----OPTIMIZER-------##############

#Adam Optimizer

optimizer = tf.train.AdamOptimizer(learning_rate= 0.001)
train = optimizer.minimize(cross_entropy)

###############-----GRAPH SESSION-------##############

init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    for i in range(200):
        batch = ch.next_batch(100)
        sess.run(train, feed_dict={x: batch[0], y_true: batch[1], hold_prob: 0.5})
        
        # PRINT OUT A MESSAGE EVERY 100 STEPS
        if i%100 == 0:
            
            print('Currently on step {}'.format(i))
            print('Accuracy is:')
            # Test the Train Model
            matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))

            acc = tf.reduce_mean(tf.cast(matches,tf.float32))

            print(sess.run(acc,feed_dict={x:ch.test_images,y_true:ch.test_labels,hold_prob:1.0}))
            print('\n')
